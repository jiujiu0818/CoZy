* Final  Grammar

  PROGRAM -> EXTERNAL-DECLARATION  | 
             PROGRAM  EXTERNAL-DECLARATION

  EXTERNAL-DECLARATION -> FUNCTION-DEFINITION *\n* | 
                          STATEMENT *\n*

  FUNCTION-DEFINITION -> *def* ID *(* FUNCTION_PARAMETER_LIST *) : \n* STATEMENT-LIST

  STATEMENT-LIST -> STATEMENT *\n* | 
                    STATEMEN-LIST STATEMENT *\n*


  STATEMENT -> ASSIGNMENT-STATEMENT *;*|
	       SELECTION-STATEMENT |
	       ITERATION-STATEMENT |
	       EVERY-STATEMENT |
	       ONCE-STATEMENT  |
	       RETURN-STATEMENT *;* |
               PRINT-STATEMENT *;* |
               FOR-STATEMENT
          


   ASSIGNMENT-STATEMENT -> ID *=* OR-EXPRESSION |  //code didn't work with ID = CONSTANT
                           ID *=* ASSIGNMENT-STATEMENT OR-EXPRESION
			    
   OR-EXPRESSION -> AND-EXPRESSION |
                    OR-EXPRESSION *or* AND-EXPRESSION
 
   AND-EXPRESSION -> EQUAILITY-EXPRESSION | 
                     AND-EXPRESSION *and* EQUALITY-EXPRESSION
 
   EQUALITY-EXPRESSION -> RELATIONAL-EXPRESSION | 
                          EQUALITY-EXPRESSION *==* RELATIONAL-EXPRESSION
                          EQUALITY-EXPRESSION *!=* RELATIONAL-EXPRESSION
  
   RELATIONAL-EXPRESSION -> ADDITIVE-EXPRESSION |
                            RELATIONAL-EXPRESSION *<* ADDITIVE-EXPRESSION |
                            RELATIONAL-EXPRESSION *>* ADDITIVE-EXPRESSION |
                            RELATIONAL-EXPRESSION *<=* ADDITIVE-EXPRESSION |
                            RELATIONAL-EXPRESSION *>=* ADDITIVE-EXPRESSION

   ADDITIVE-EXPRESSION -> MULTIPLICATIVE-EXPRESSION |
                          ADDITIVE-EXPRESSION *+* MULTIPLICATIVE-EXPRESSION |
                          ADDITIVE-EXPRESSION *-* MULTIPLICATIVE-EXPRESSION

   MULTIPLICATIVE-EXPRESSION -> FUNCTION-EXPRESSION |
                                MULTIPLICATIVE-EXPRESSION *** FUNCTION-EXPRESSION |
                				MULTIPLICATIVE-EXPRESSION */* FUNCTION-EXPRESSION

   FUNCTION-EXPRESSION -> PRIMARY-EXPRESSION |
                          ID *(* PARAMETER-LIST-START *)*

   PRIMARY-EXPRESSION -> CONSTANT |
                         ID |
                         *[* PARAMETER-LIST *]* |
                         ( OR-EXPRESSION ) |
                         TEMPERATURE

   LIST-OPERATION-EXPRESSION -> ID *[* OR-EXPRESSION *]*

   PARAMETER-LIST-START -> \epsilon |
                           PARAMETER-LIST

   PARAMETER-LIST -> PARAMETER-LIST | 
                     PARAMETER-LIST *,* OR-EXPRESSION
   
   FUNCTION-PARAMETER-LIST -> \epsilon | FUNCTION-PARAMETER
                              
   FUNCTION-PARAMETER -> ID | FUNCTION-PARAMETER *,* FUNCTION-PARAMETER-END 
   
   FUNCTION-PARAMETER-END -> ID

   ITERATION-STATEMENT -> *while (* OR-EXPRESSION *) :\n* STATEMENT-LIST

   SELECTION-STATEMENT -> *if (* OR-EXPRESSION *) :\n* STATEMENT-LIST |
                          *if (* OR-EXPRESSION *) :\n* STATEMENT-LIST *else: * STATEMENT-LIST
   
   PRINT-STATEMENT -> *print (* OR-EXPRESSION *)*
   
   FOR-STATEMENT -> *for* ID *in* OR-EXPRESSION *to* OR-EXPRESSION *: \n* STATEMENT-LIST |
   		    *for* ID *in* LIST *: \n* STATEMENT-LIST
   
   EVERY-STATEMENT -> *every* OR-EXPRESSION *: \n*
   
   ONCE-STATEMENT -> *once every* OR-EXPRESION *: \n*
   
   RETURN-STATEMENT -> *return* | *return expression*
   

  
   *Temperature grammar*
   TEMPERATURE -> TEMPERATURE *+* TEMPERATURE_PRIM | 
                  TEMPERATURE *-* TEMPERATURE_PRIM | 
                  TEMPERATURE_PRIM

   TEMPERATURE_PRIM -> *temp_constant* |
                       *temp_constant* *** CONSTANT |
                       *temp_constant* */* CONSTANT |
                       CONSTANT *** *temp_constant*

